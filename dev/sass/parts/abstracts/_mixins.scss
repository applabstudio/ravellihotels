/* -------------------------------------------------------------------------- */
/*                            REUSABLE SASS MIXINS                            */
/* -------------------------------------------------------------------------- */

/* -------------------------------------------------------------------------- */
/*                                  ON-EVENT                                  */
/* -------------------------------------------------------------------------- */
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/* -------------------------------------------------------------------------- */
/*                                 WHEN-INSIDE                                */
/* -------------------------------------------------------------------------- */
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

/* -------------------------------------------------------------------------- */
/*                                  CONTAINER                                 */
/* -------------------------------------------------------------------------- */
@mixin container($fluid: false) {
  padding-left: $container-pad;
  padding-right: $container-pad;
  margin: 0 auto;
  width: 100%;
  @if not $fluid {
    @each $bp, $width in $container-width {
      @include media(">=#{$bp}") {
        width: $width;
      };
    }
  }
}

/* -------------------------------------------------------------------------- */
/*                               MIXINS POSITION                              */
/* -------------------------------------------------------------------------- */
// Positioning helpers
@mixin absolute($args: '') {
  @include position(absolute, $args);
}

@mixin fixed($args: '') {
  @include position(fixed, $args);
}

@mixin relative($args: '') {
  @include position(relative, $args);
}

// Positioning
@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);
    @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
      #{$o}: nth($args, $i + 1);
    }
  }
  position: $position;
}


/* -------------------------------------------------------------------------- */
/*                                 MIXIN SIZE                                 */
/* -------------------------------------------------------------------------- */
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/* -------------------------------------------------------------------------- */
/*                               MIXIN SET-FONT                               */
/* -------------------------------------------------------------------------- */
@mixin set-font( $family: $base-font-family , $weight: normal , $style: normal, $fontsize: $fsPrimary ) {
  font-family: $family , 'Arial', 'Helvetica', sans-serif;
  font-style: $style;
  font-weight: $weight;
  font-size: $fontsize;
}

/* -------------------------------------------------------------------------- */
/*                                 MIXINS REM UNITS                                */
/* -------------------------------------------------------------------------- */
// Ultimate Rem Units
@function parseInt($n) {
  /* 2 */
  @return $n / ($n * 0 + 1);
}
@mixin rem($property, $values) {
  $px: (); /* 3 */
  $rem: (); /* 3 */
  @each $value in $values {
    /* 4 */
    @if $value == 0 or $value == auto {
      /* 5 */
      $px: append($px, $value);
      $rem: append($rem, $value);
    } @else {
      $unit: unit($value); /* 6 */
      $val: parseInt($value); /* 6 */
      @if $unit == 'px' {
        /* 7 */
        $px: append($px, $value);
        $rem: append($rem, ($val / 10 + rem));
      }
      @if $unit == 'rem' {
        /* 7 */
        $px: append($px, ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }
  @if $px == $rem {
    /* 8 */
    #{$property}: $px; /* 9 */
  } @else {
    #{$property}: $px; /* 9 */
    #{$property}: $rem; /* 9 */
  }
}

/* -------------------------------------------------------------------------- */
/*                                MIXIN BORDER                                */
/* -------------------------------------------------------------------------- */
@mixin border($direction, $width, $style, $color) {
  border-#{$direction}: $width $style $color;
}

/* -------------------------------------------------------------------------- */
/*                               MIXINS PADDING                               */
/* -------------------------------------------------------------------------- */
@mixin padding($top, $right, $bottom, $left) { 
  padding: $top $right $bottom $left;
}

@mixin padding-component($space: $sm) {
  padding: $space;
}

/* -------------------------------------------------------------------------- */
/*                    MIXINS DRUPAL8-ADMIN-TOOLBAR PADDING                    */
/* -------------------------------------------------------------------------- */
@mixin drupal-admintoolbar($top: $header-h) { 
  padding-top: $top;
}

/* -------------------------------------------------------------------------- */
/*                              MIXINS BOX-SHADOW                             */
/* -------------------------------------------------------------------------- */
@mixin shadow-logo($x-axis: 2px, $y-axis: 2px, $blur: 2px, $color: #020202) {
  filter:drop-shadow( $x-axis $y-axis $blur $color );
  -webkit-filter: drop-shadow(2px 2px 2px #020202);
}

/* -------------------------------------------------------------------------- */
/*                         MIXINS FLEXBOX CROSSBROWSER                        */
/* -------------------------------------------------------------------------- */
// Flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
  -webkit-box-flex: $values;
     -moz-box-flex: $values;
      -webkit-flex: $values;
  	  -ms-flex: $values;
  	      flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
     -moz-flex-direction: $direction;
      -ms-flex-direction: $direction;
          flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
     -moz-flex-wrap: $wrap;
      -ms-flex-wrap: $wrap;
          flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
     -moz-flex-flow: $flow;
      -ms-flex-flow: $flow;
          flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
     -moz-box-ordinal-group: $val;     
  	     -ms-flex-order: $val;     
  	      -webkit-order: $val;  
  		      order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  -webkit-flex-grow: $grow;
     -moz-flex-grow: $grow;
      -ms-flex-grow: $grow;
          flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number> 
@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;
     -moz-flex-shrink: $shrink;
      -ms-flex-shrink: $shrink;
          flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width> 
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
     -moz-flex-basis: $width;
      -ms-flex-basis: $width;
          flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around 
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
     -moz-justify-content: $justify;
      -ms-justify-content: $justify;
          justify-content: $justify;
            -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch 
@mixin align-content($align) {
  -webkit-align-content: $align;
     -moz-align-content: $align;
      -ms-align-content: $align;
          align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch 
@mixin align-items($align) {
  -webkit-align-items: $align;
     -moz-align-items: $align;
      -ms-align-items: $align;
          align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
@mixin align-self($align) {
  -webkit-align-self: $align;
     -moz-align-self: $align;
      -ms-align-self: $align;
          align-self: $align;
}

/* -------------------------------------------------------------------------- */
/*                            HIDING/SHOWING FADE TRANSITION                  */
/* -------------------------------------------------------------------------- */
@mixin fade($type) {
  @if $type == 'hide' {
    visibility: hidden;
    opacity: 0;
    transition: visibility $tt, opacity $tt;
  }
  @else if $type == 'show' {
    visibility: visible;
    opacity: 1;
    transition: visibility $tt, opacity $tt;
  }
}

/* -------------------------------------------------------------------------- */
/*                                 LIST RESET                                 */
/* -------------------------------------------------------------------------- */
%listreset {
  margin: 0;
  padding: 0;
  list-style: none;
}